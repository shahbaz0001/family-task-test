@namespace WebClient.Components
@using WebClient.Abstractions
@using Domain.ViewModel
@inject IMemberDataService memberService;
@inject ITaskDataService taskService;
@inject IJSRuntime JSRuntime;

<style>


    .draggable {
        margin-bottom: 10px;
        padding: 10px 25px;
        border: 1px solid #424d5c;
        cursor: grab;
        background: #5c6b7f;
        border-radius: 5px;
        /* color: #ffffff;
        width: 250px;*/
    }

        .draggable:active {
            cursor: grabbing;
        }

    .dragging {
        cursor: grabbing;
    }


    .drag-start {
        border: solid 2px green !important;
    }

    .task-wrapper .task-item {
        background: #FFFFFF;
        border: 1px solid #C5C9C9;
        box-sizing: border-box;
        border-radius: 8px;
        font-size: 24px;
        font-family: "Poppins Light";
    }

    .done-text {
        text-decoration: line-through;
    }

    .task-wrapper .avtar {
        width: 32px;
        height: 32px;
        border-radius: 50%;
    }

    @@media(max-width: 1400px) {
        .task-wrapper .task-item {
            font-size: 16px;
        }

        .task-wrapper .avtar {
            width: 24px;
            height: 24px;
        }

        .delete-icon {
            width: 25px;
        }
    }

    @@media(max-width: 767.98px) {
        .task-wrapper .avtar {
            width: 16px;
            height: 16px;
        }
    }
</style>

<div class="task-wrapper">
    @foreach (var item in _tasks)
    {
        <div class="@_taskItemClassName p-3 my-3 row m-0 draggable @_dragCSS-@item.Id" draggable="true"
             @ondragstart="@(() => HandleDragStart(item))"
             @ondragend="@(() => HandleDragEnd(item))">
            <div class="col-10 p-0">
                <Check TValue="bool" Checked="@item.IsComplete" CheckedChanged="@(val => ToggleTask(item))">
                    <span class="@(item.IsComplete ? "done-text" : "")">@item.Subject</span>
                </Check>

            </div>

            <div class="col-2 p-0 d-flex justify-content-end align-items-center">
                @if (_members.Any())
                {
                    @if (item.AssignedToId.HasValue && item.AssignedToId.Value != Guid.Empty)
                    {
                        <div class="avtar mr-1" style="background-color: @(_members.Any()?_members.FirstOrDefault(f=>f.Id==item.AssignedToId).Avatar:"");"></div>
                    }
                }
                <img class="delete-icon" src="/assets/images/delete-icon.svg" />
            </div>
        </div>
    }

</div>

@code  {

    private MemberVm _selectedMember;
    private List<TaskViewModel> _tasks = new List<TaskViewModel>();
    private List<MemberVm> _members = new List<MemberVm>();
    private string _dragCSS = "drag-task";
    private string _dragClassName = "drag-start";
    private string _taskItemClassName = "task-item";


    protected override Task OnInitializedAsync()
    {
        taskService.TaskUpdated += TaskServiceOnTasksUpdated;
        memberService.MembersChanged += MemberServiceOnMembersChanged;

        LoadCurrentTasks();
        return base.OnInitializedAsync();
    }

    private void ToggleTask(TaskViewModel model)
    {
        model.IsComplete = !model.IsComplete;
        taskService.UpdateTask(model);
        StateHasChanged();
    }

    private void TaskServiceOnTasksUpdated(object sender, EventArgs e)
    {
        LoadCurrentTasks();
    }

    private void MemberServiceOnMembersChanged(object sender, EventArgs e)
    {
        _members = (List<MemberVm>)((IMemberDataService)sender).Members;
    }

    private void LoadCurrentTasks()
    {
        _selectedMember = memberService.SelectedMember;
        _members = (List<MemberVm>)memberService.Members;
        if (_selectedMember == null || _selectedMember.Id == Guid.Empty)
        {
            _tasks = (List<TaskViewModel>)taskService.Tasks;

            if (_tasks.Any())
                StateHasChanged();
            return;
        };
        _tasks = taskService.Tasks.Where(t => t.AssignedToId == _selectedMember.Id).ToList();
        StateHasChanged();
    }

    private void HandleDragStart(TaskViewModel task)
    {
        taskService.SetTask(task);
        JSRuntime.InvokeVoidAsync("Custom.AddDragabbleElementClassByClassName", _taskItemClassName, _dragCSS + "-" + task.Id, _dragClassName);
    }

    private void HandleDragEnd(TaskViewModel task)
    {
        JSRuntime.InvokeVoidAsync("Custom.RemoveDragabbleElementClassByClassName", _dragCSS + "-" + task.Id, _dragClassName);
    }

}